{"ast":null,"code":"import { Injector, ErrorHandler } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpRequest, HttpErrorResponse } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\n/** Passes HttpErrorResponse to application-wide error handler */\n\nexport let HttpErrorInterceptor = /*#__PURE__*/(() => {\n  class HttpErrorInterceptor {\n    constructor(injector) {\n      this.injector = injector;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(tap({\n        error: err => {\n          if (err instanceof HttpErrorResponse) {\n            const appErrorHandler = this.injector.get(ErrorHandler);\n            appErrorHandler.handleError(err);\n          }\n        }\n      }));\n    }\n\n  }\n\n  HttpErrorInterceptor.ɵfac = function HttpErrorInterceptor_Factory(t) {\n    return new (t || HttpErrorInterceptor)(i0.ɵɵinject(i0.Injector));\n  };\n\n  HttpErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpErrorInterceptor,\n    factory: HttpErrorInterceptor.ɵfac\n  });\n  return HttpErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}