{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment as env } from '../../../environments/environment';\nimport { authLogin, authLogout } from '../../core/core.module';\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@ngrx/store\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, store) {\n      this.http = http;\n      this.router = router;\n      this.store = store;\n      this.API_URL = env.apiUrl + '/auth';\n    }\n\n    static _handleError(err) {\n      return throwError(() => err.message || 'Error: Unable to complete request.');\n    }\n\n    createUser(user) {\n      return this.http.post(`${this.API_URL}/register`, user).pipe(catchError(AuthService._handleError)).pipe(map(res => {\n        this.setTokens(res);\n        return res;\n      }));\n    }\n\n    confirmEmail(token) {\n      return this.http.post(`${this.API_URL}/confirm-email/${token}`, {}).pipe(catchError(AuthService._handleError));\n    }\n\n    resendEmail(username) {\n      return this.http.post(`${this.API_URL}/resend-email`, {\n        'username': username\n      }).pipe(catchError(AuthService._handleError));\n    }\n\n    validateRecaptcha(captchaResponse) {\n      return this.http.post(`${this.API_URL}/validate-recaptcha`, {\n        'response': captchaResponse\n      }).pipe(catchError(AuthService._handleError));\n    }\n\n    login(user) {\n      return this.http.post(`${this.API_URL}/login`, user).pipe(catchError(AuthService._handleError)).pipe(map(res => {\n        this.setTokens(res);\n        return res;\n      }));\n    }\n\n    resetPassword(email) {\n      return this.http.post(`${this.API_URL}/reset-password`, {\n        'email': email\n      }).pipe(catchError(AuthService._handleError));\n    }\n\n    updatePassword(resetObj) {\n      return this.http.put(`${this.API_URL}/update-password`, resetObj).pipe(catchError(AuthService._handleError));\n    }\n\n    logout() {\n      this.http.post(`${this.API_URL}/logout`, {}).pipe(catchError(AuthService._handleError)).subscribe();\n      this.stopRefreshTokenTimer();\n      this.store.dispatch(authLogout());\n      this.router.navigate(['/login']);\n    }\n\n    refreshToken() {\n      // get the current refresh token\n      let refreshToken = (document.cookie.split(';').find(x => x.includes('refreshToken')) || '=').split('=')[1];\n      let userId;\n\n      if (refreshToken) {\n        userId = jwt_decode(refreshToken).sub;\n      } // get a new refresh token and restart timer\n\n\n      return this.http.post(`${this.API_URL}/refresh-token`, {\n        'refresh_token': refreshToken,\n        'user_id': userId\n      }).pipe(map(res => {\n        if (res.status !== 'fail') {\n          this.setTokens(res);\n        }\n\n        return res;\n      }));\n    }\n\n    usernameAvailable(username) {\n      return this.http.get(`${this.API_URL}/username-available/${username}`).pipe(catchError(AuthService._handleError));\n    }\n\n    emailAvailable(email) {\n      return this.http.get(`${this.API_URL}/email-available/${email}`).pipe(catchError(AuthService._handleError));\n    } // helper methods\n\n\n    setTokens(res) {\n      // store auth token in localStorage\n      this.store.dispatch(authLogin({\n        token: res.auth_token,\n        isConfirmed: res.is_confirmed\n      })); // store refresh token as cookie\n\n      const exp = new Date(jwt_decode(res.refresh_token).exp * 1000).toUTCString();\n      document.cookie = `refreshToken=${res.refresh_token}; expires=${exp}; path=/; SameSite=None; Secure=${true}`; // start timer\n\n      this.startRefreshTokenTimer(res.auth_token);\n    }\n\n    startRefreshTokenTimer(token) {\n      // set a timeout to refresh the token a minute before it expires\n      const expires = new Date(jwt_decode(token).exp * 1000);\n      const timeout = expires.getTime() - Date.now() - 60 * 1000;\n      this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n    }\n\n    stopRefreshTokenTimer() {\n      clearTimeout(this.refreshTokenTimeout);\n      this.revokeRefreshToken();\n    }\n\n    revokeRefreshToken() {\n      document.cookie = 'refreshToken=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Store));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}