{"ast":null,"code":"import { ActivationEnd, Router } from '@angular/router';\nimport { NgZone } from '@angular/core';\nimport { OverlayContainer } from '@angular/cdk/overlay';\nimport { select, Store } from '@ngrx/store';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { TranslateService } from '@ngx-translate/core';\nimport { combineLatest, merge, of } from 'rxjs';\nimport { tap, withLatestFrom, distinctUntilChanged, filter } from 'rxjs/operators';\nimport { selectSettingsState } from '../core.state';\nimport { LocalStorageService } from '../local-storage/local-storage.service';\nimport { AnimationsService } from '../animations/animations.service';\nimport { TitleService } from '../title/title.service';\nimport { actionSettingsChangeAnimationsElements, actionSettingsChangeAnimationsPage, actionSettingsChangeAnimationsPageDisabled, actionSettingsChangeAutoNightMode, actionSettingsChangeLanguage, actionSettingsChangeTheme, actionSettingsChangeStickyHeader, actionSettingsChangeHour } from './settings.actions';\nimport { selectEffectiveTheme, selectSettingsLanguage, selectPageAnimations, selectElementsAnimations } from './settings.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/cdk/overlay\";\nimport * as i5 from \"../local-storage/local-storage.service\";\nimport * as i6 from \"../title/title.service\";\nimport * as i7 from \"../animations/animations.service\";\nimport * as i8 from \"@ngx-translate/core\";\nexport const SETTINGS_KEY = 'SETTINGS';\nconst INIT = of('protego-init-effect-trigger');\nexport let SettingsEffects = /*#__PURE__*/(() => {\n  class SettingsEffects {\n    constructor(actions$, store, router, overlayContainer, localStorageService, titleService, animationsService, translateService, ngZone) {\n      this.actions$ = actions$;\n      this.store = store;\n      this.router = router;\n      this.overlayContainer = overlayContainer;\n      this.localStorageService = localStorageService;\n      this.titleService = titleService;\n      this.animationsService = animationsService;\n      this.translateService = translateService;\n      this.ngZone = ngZone;\n      this.hour = 0;\n      this.changeHour = this.ngZone.runOutsideAngular(() => setInterval(() => {\n        const hour = new Date().getHours();\n\n        if (hour !== this.hour) {\n          this.hour = hour;\n          this.ngZone.run(() => this.store.dispatch(actionSettingsChangeHour({\n            hour\n          })));\n        }\n      }, 60000));\n      this.persistSettings = createEffect(() => this.actions$.pipe(ofType(actionSettingsChangeAnimationsElements, actionSettingsChangeAnimationsPage, actionSettingsChangeAnimationsPageDisabled, actionSettingsChangeAutoNightMode, actionSettingsChangeLanguage, actionSettingsChangeStickyHeader, actionSettingsChangeTheme), withLatestFrom(this.store.pipe(select(selectSettingsState))), tap(([action, settings]) => this.localStorageService.setItem(SETTINGS_KEY, settings))), {\n        dispatch: false\n      });\n      this.updateRouteAnimationType = createEffect(() => merge(INIT, this.actions$.pipe(ofType(actionSettingsChangeAnimationsElements, actionSettingsChangeAnimationsPage))).pipe(withLatestFrom(combineLatest([this.store.pipe(select(selectPageAnimations)), this.store.pipe(select(selectElementsAnimations))])), tap(([action, [pageAnimations, elementsAnimations]]) => this.animationsService.updateRouteAnimationType(pageAnimations, elementsAnimations))), {\n        dispatch: false\n      });\n      this.updateTheme = createEffect(() => merge(INIT, this.actions$.pipe(ofType(actionSettingsChangeTheme))).pipe(withLatestFrom(this.store.pipe(select(selectEffectiveTheme))), tap(([action, effectiveTheme]) => {\n        const classList = this.overlayContainer.getContainerElement().classList;\n        const toRemove = Array.from(classList).filter(item => item.includes('-theme'));\n\n        if (toRemove.length) {\n          classList.remove(...toRemove);\n        }\n\n        classList.add(effectiveTheme);\n      })), {\n        dispatch: false\n      });\n      this.setTranslateServiceLanguage = createEffect(() => this.store.pipe(select(selectSettingsLanguage), distinctUntilChanged(), tap(language => this.translateService.use(language))), {\n        dispatch: false\n      });\n      this.setTitle = createEffect(() => merge(this.actions$.pipe(ofType(actionSettingsChangeLanguage)), this.router.events.pipe(filter(event => event instanceof ActivationEnd))).pipe(tap(() => {\n        this.titleService.setTitle(this.router.routerState.snapshot.root, this.translateService);\n      })), {\n        dispatch: false\n      });\n    }\n\n  }\n\n  SettingsEffects.ɵfac = function SettingsEffects_Factory(t) {\n    return new (t || SettingsEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.OverlayContainer), i0.ɵɵinject(i5.LocalStorageService), i0.ɵɵinject(i6.TitleService), i0.ɵɵinject(i7.AnimationsService), i0.ɵɵinject(i8.TranslateService), i0.ɵɵinject(i0.NgZone));\n  };\n\n  SettingsEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SettingsEffects,\n    factory: SettingsEffects.ɵfac\n  });\n  return SettingsEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}