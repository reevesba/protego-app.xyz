{"ast":null,"code":"import { ActivatedRoute } from \"@angular/router\";\nimport { Validators, FormBuilder } from '@angular/forms';\nimport { TokenService } from '../../../../shared/services/token.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../../../shared/services/token.service\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/select\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/material/icon\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"@ngx-translate/core\";\n\nfunction ModelFormComponent_mat_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const paradigm_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", paradigm_r4.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", paradigm_r4.viewValue, \" \");\n  }\n}\n\nfunction ModelFormComponent_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\")(1, \"mat-icon\", 9);\n    i0.ɵɵtext(2, \"error_outline\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 1, \"protego.model-form.paradigm.error\"), \" \");\n  }\n}\n\nfunction ModelFormComponent_mat_option_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const algorithm_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", algorithm_r5.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", algorithm_r5.viewValue, \" \");\n  }\n}\n\nfunction ModelFormComponent_mat_error_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\")(1, \"mat-icon\", 9);\n    i0.ɵɵtext(2, \"error_outline\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(4, 1, \"protego.model-form.algorithm.error\"), \" \");\n  }\n}\n\nconst _c0 = function (a0, a1) {\n  return [a0, a1];\n};\n\nexport let ModelFormComponent = /*#__PURE__*/(() => {\n  class ModelFormComponent {\n    constructor(ar, fb, tokenService) {\n      this.ar = ar;\n      this.fb = fb;\n      this.tokenService = tokenService;\n      this.routing = \"../../\";\n      this.paradigms = [{\n        value: 'onl',\n        viewValue: 'Online'\n      }, {\n        value: 'bat',\n        viewValue: 'Batch'\n      }];\n      this.onlineAlgorithms = [{\n        value: 'treo',\n        viewValue: 'Hoeffding Adaptive Tree'\n      }, {\n        value: 'knno',\n        viewValue: 'KNN ADWIN'\n      }, {\n        value: 'logo',\n        viewValue: 'Logistic Regression'\n      }, {\n        value: 'pero',\n        viewValue: 'Perceptron'\n      }, {\n        value: 'mnbo',\n        viewValue: 'Multinomial NB'\n      }, {\n        value: 'rano',\n        viewValue: 'Adaptive Random Forest'\n      }];\n      this.batchAlgorithms = [{\n        value: 'treb',\n        viewValue: 'Decision Tree'\n      }, {\n        value: 'knnb',\n        viewValue: 'KNN'\n      }, {\n        value: 'logb',\n        viewValue: 'Logistic Regression'\n      }, {\n        value: 'perb',\n        viewValue: 'Perceptron'\n      }, {\n        value: 'mnbb',\n        viewValue: 'Multinomial NB'\n      }, {\n        value: 'ranb',\n        viewValue: 'Random Forest'\n      }];\n    }\n\n    ngOnInit() {\n      this.modelForm = this.fb.group({\n        paradigm: ['', [Validators.required]],\n        algorithm: ['', [Validators.required]]\n      });\n      this.username = this.tokenService.username;\n      this.ar.params.subscribe(params => {\n        this.groupId = params['groupId'];\n      });\n    }\n\n    get modelFormControl() {\n      return this.modelForm.controls;\n    }\n\n    setAlgorithms(event) {\n      if (event.source.value === 'onl') {\n        this.algorithms = this.onlineAlgorithms;\n      } else if (event.source.value === 'bat') {\n        this.algorithms = this.batchAlgorithms;\n      } else {\n        this.algorithms = [];\n      }\n    }\n\n    setRouting(event) {\n      this.routing = this.routing.concat(event.source.value);\n    }\n\n  }\n\n  ModelFormComponent.ɵfac = function ModelFormComponent_Factory(t) {\n    return new (t || ModelFormComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.TokenService));\n  };\n\n  ModelFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ModelFormComponent,\n    selectors: [[\"model-form\"]],\n    decls: 23,\n    vars: 22,\n    consts: [[1, \"protego-page-container\"], [1, \"protego-form\", 3, \"formGroup\"], [1, \"protego-full-width\"], [\"formControlName\", \"paradigm\", \"required\", \"\", 3, \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [\"formControlName\", \"algorithm\", \"required\", \"\", 3, \"selectionChange\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"attr.aria-label\", \"save\", 1, \"protego-save-button\", 3, \"routerLink\", \"disabled\"], [3, \"value\"], [2, \"margin-right\", \"2px\"]],\n    template: function ModelFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\")(2, \"h2\");\n        i0.ɵɵtext(3);\n        i0.ɵɵpipe(4, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"form\", 1)(6, \"mat-form-field\", 2)(7, \"mat-label\");\n        i0.ɵɵtext(8);\n        i0.ɵɵpipe(9, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"mat-select\", 3);\n        i0.ɵɵlistener(\"selectionChange\", function ModelFormComponent_Template_mat_select_selectionChange_10_listener($event) {\n          return ctx.setAlgorithms($event);\n        });\n        i0.ɵɵtemplate(11, ModelFormComponent_mat_option_11_Template, 2, 2, \"mat-option\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(12, ModelFormComponent_mat_error_12_Template, 5, 3, \"mat-error\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"mat-form-field\", 2)(14, \"mat-label\");\n        i0.ɵɵtext(15);\n        i0.ɵɵpipe(16, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"mat-select\", 6);\n        i0.ɵɵlistener(\"selectionChange\", function ModelFormComponent_Template_mat_select_selectionChange_17_listener($event) {\n          return ctx.setRouting($event);\n        });\n        i0.ɵɵtemplate(18, ModelFormComponent_mat_option_18_Template, 2, 2, \"mat-option\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, ModelFormComponent_mat_error_19_Template, 5, 3, \"mat-error\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"button\", 7);\n        i0.ɵɵtext(21);\n        i0.ɵɵpipe(22, \"translate\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 11, \"protego.model-form.header\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.modelForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 13, \"protego.model-form.paradigm\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.paradigms);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.modelFormControl.paradigm.touched && (ctx.modelFormControl.paradigm.errors == null ? null : ctx.modelFormControl.paradigm.errors.required));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(16, 15, \"protego.model-form.algorithm\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.algorithms);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.modelFormControl.algorithm.touched && (ctx.modelFormControl.algorithm.errors == null ? null : ctx.modelFormControl.algorithm.errors.required));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction2(19, _c0, ctx.routing, ctx.groupId))(\"disabled\", !ctx.modelForm.valid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(22, 17, \"protego.next\"));\n      }\n    },\n    directives: [i4.MatCard, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i5.MatFormField, i5.MatLabel, i6.MatSelect, i2.NgControlStatus, i2.FormControlName, i2.RequiredValidator, i7.NgForOf, i8.MatOption, i7.NgIf, i5.MatError, i9.MatIcon, i10.MatButton, i1.RouterLink],\n    pipes: [i11.TranslatePipe],\n    styles: [\".protego-page-container[_ngcontent-%COMP%]{min-width:150px;max-width:650px;width:90%;margin:auto;padding-top:2em;padding-bottom:2em}.protego-full-width[_ngcontent-%COMP%]{width:100%}.protego-save-button[_ngcontent-%COMP%]{margin-top:1em}\"]\n  });\n  return ModelFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}