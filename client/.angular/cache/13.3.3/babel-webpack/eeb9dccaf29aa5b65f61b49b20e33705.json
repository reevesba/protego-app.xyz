{"ast":null,"code":"import { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Store, select } from '@ngrx/store';\nimport { selectToken } from './auth.selectors';\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/router\";\nexport let AdminGuardService = /*#__PURE__*/(() => {\n  class AdminGuardService {\n    constructor(store, router) {\n      this.store = store;\n      this.router = router;\n    }\n\n    canActivate(route, state) {\n      this.store.pipe(select(selectToken)).subscribe(val => this.token = val);\n\n      if (this.token) {\n        this.role = jwt_decode(this.token).role;\n      }\n\n      if (this.role) {\n        // check if route is restricted by role\n        if (route.data.roles && route.data.roles.indexOf(this.role) === -1) {\n          // role not authorized so redirect to home page\n          this.router.navigate(['/']);\n          return false;\n        } // user role is authorized\n\n\n        return true;\n      } // not logged in, redirect to login page with return url\n\n\n      this.router.navigate(['/login'], {\n        queryParams: {\n          returnUrl: state.url\n        }\n      });\n      return false;\n    }\n\n  }\n\n  AdminGuardService.ɵfac = function AdminGuardService_Factory(t) {\n    return new (t || AdminGuardService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router));\n  };\n\n  AdminGuardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminGuardService,\n    factory: AdminGuardService.ɵfac,\n    providedIn: 'root'\n  });\n  return AdminGuardService;\n})();","map":null,"metadata":{},"sourceType":"module"}