{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment as env } from '../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PayloadService = /*#__PURE__*/(() => {\n  class PayloadService {\n    constructor(http) {\n      this.http = http;\n      this.API_URL = env.apiUrl + '/payloads';\n    }\n\n    static _handleError(err) {\n      return throwError(() => err.message || 'Error: Unable to complete request.');\n    }\n\n    getGroupPayloads(groupId, pageIndex, pageSize) {\n      return this.http.get(`${this.API_URL}/${groupId}/${pageIndex}/${pageSize}`).pipe(catchError(PayloadService._handleError));\n    }\n\n    loadPayloads(groupId) {\n      return this.http.get(`${this.API_URL}/loader/${groupId}`).pipe(catchError(PayloadService._handleError));\n    }\n\n    updatePayload(payload, payloadId) {\n      return this.http.put(`${this.API_URL}/${payloadId}`, payload).pipe(catchError(PayloadService._handleError));\n    }\n\n    deletePayload(payloadId) {\n      return this.http.delete(`${this.API_URL}/${payloadId}`).pipe(catchError(PayloadService._handleError));\n    }\n\n  }\n\n  PayloadService.ɵfac = function PayloadService_Factory(t) {\n    return new (t || PayloadService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PayloadService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PayloadService,\n    factory: PayloadService.ɵfac\n  });\n  return PayloadService;\n})();","map":null,"metadata":{},"sourceType":"module"}