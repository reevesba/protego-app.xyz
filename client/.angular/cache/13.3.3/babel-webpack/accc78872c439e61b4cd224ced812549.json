{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { ErrorHandler } from '@angular/core';\nimport { HttpClientModule, HttpClient, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { StoreRouterConnectingModule, RouterStateSerializer } from '@ngrx/router-store';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { FaIconLibrary, FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { FormsModule } from '@angular/forms';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { environment } from '../../environments/environment';\nimport { reducers, metaReducers, selectRouterState } from './core.state';\nimport { AuthEffects } from './auth/auth.effects';\nimport { selectIsAuthenticated, selectAuth, selectToken, selectConfirmed } from './auth/auth.selectors';\nimport { authLogin, authLogout } from './auth/auth.actions';\nimport { AdminGuardService } from './auth/admin-guard.service';\nimport { AuthGuardService } from './auth/auth-guard.service';\nimport { ConfirmedGuardService } from './auth/confirmed-guard.service';\nimport { TitleService } from './title/title.service';\nimport { ROUTE_ANIMATIONS_ELEMENTS, routeAnimations } from './animations/animations.route';\nimport { AnimationsService } from './animations/animations.service';\nimport { AppErrorHandler } from './error-handler/app-error-handler.service';\nimport { CustomSerializer } from './router/custom-serializer';\nimport { LocalStorageService } from './local-storage/local-storage.service';\nimport { HttpErrorInterceptor } from './http-interceptors/http-error.interceptor';\nimport { JwtInterceptor } from './http-interceptors/jwt.interceptor';\nimport { GoogleAnalyticsEffects } from './google-analytics/google-analytics.effects';\nimport { NotificationService } from './notifications/notification.service';\nimport { SettingsEffects } from './settings/settings.effects';\nimport { selectSettingsLanguage, selectEffectiveTheme, selectSettingsStickyHeader } from './settings/settings.selectors';\nimport { MatButtonModule } from '@angular/material/button';\nimport { faCog, faBars, faRocket, faPowerOff, faUserCircle, faPlayCircle } from '@fortawesome/free-solid-svg-icons';\nimport { faGithub, faMediumM, faTwitter, faInstagram, faYoutube, faLinkedin } from '@fortawesome/free-brands-svg-icons';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@fortawesome/angular-fontawesome\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"@ngrx/router-store\";\nimport * as i4 from \"@ngrx/effects\";\nimport * as i5 from \"@ngx-translate/core\";\nexport { TitleService, selectAuth, authLogin, authLogout, routeAnimations, LocalStorageService, selectIsAuthenticated, selectToken, selectConfirmed, ROUTE_ANIMATIONS_ELEMENTS, AnimationsService, AdminGuardService, AuthGuardService, ConfirmedGuardService, selectRouterState, NotificationService, selectEffectiveTheme, selectSettingsLanguage, selectSettingsStickyHeader };\nexport function httpLoaderFactory(http) {\n  return new TranslateHttpLoader(http, `${environment.i18nPrefix}/assets/i18n/`, '.json');\n}\nexport let CoreModule = /*#__PURE__*/(() => {\n  class CoreModule {\n    constructor(parentModule, faIconLibrary) {\n      if (parentModule) {\n        throw new Error('CoreModule is already loaded. Import only in AppModule');\n      }\n\n      faIconLibrary.addIcons(faCog, faBars, faRocket, faPowerOff, faUserCircle, faPlayCircle, faGithub, faMediumM, faLinkedin, faTwitter, faInstagram, faYoutube);\n    }\n\n  }\n\n  CoreModule.ɵfac = function CoreModule_Factory(t) {\n    return new (t || CoreModule)(i0.ɵɵinject(CoreModule, 12), i0.ɵɵinject(i1.FaIconLibrary));\n  };\n\n  CoreModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: CoreModule\n  });\n  CoreModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [{\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpErrorInterceptor,\n      multi: true\n    }, {\n      provide: HTTP_INTERCEPTORS,\n      useClass: JwtInterceptor,\n      multi: true\n    }, {\n      provide: ErrorHandler,\n      useClass: AppErrorHandler\n    }, {\n      provide: RouterStateSerializer,\n      useClass: CustomSerializer\n    }],\n    imports: [[// angular\n    CommonModule, HttpClientModule, FormsModule, // material\n    MatSidenavModule, MatToolbarModule, MatListModule, MatMenuModule, MatIconModule, MatSelectModule, MatTooltipModule, MatSnackBarModule, MatButtonModule, // ngrx\n    StoreModule.forRoot(reducers, {\n      metaReducers\n    }), StoreRouterConnectingModule.forRoot(), EffectsModule.forRoot([AuthEffects, SettingsEffects, GoogleAnalyticsEffects]), environment.production ? [] : StoreDevtoolsModule.instrument({\n      name: 'protego'\n    }), // 3rd party\n    FontAwesomeModule, TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: httpLoaderFactory,\n        deps: [HttpClient]\n      }\n    })], // angular\n    FormsModule, // material\n    MatSidenavModule, MatToolbarModule, MatListModule, MatMenuModule, MatIconModule, MatSelectModule, MatTooltipModule, MatSnackBarModule, MatButtonModule, // 3rd party\n    FontAwesomeModule, TranslateModule]\n  });\n  return CoreModule;\n})();","map":null,"metadata":{},"sourceType":"module"}