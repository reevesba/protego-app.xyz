{"ast":null,"code":"import { ofType, createEffect, Actions } from '@ngrx/effects';\nimport { tap } from 'rxjs/operators';\nimport { LocalStorageService } from '../local-storage/local-storage.service';\nimport { authLogin, authLogout } from './auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../local-storage/local-storage.service\";\nexport const AUTH_KEY = 'AUTH';\nexport let AuthEffects = /*#__PURE__*/(() => {\n  class AuthEffects {\n    constructor(actions$, localStorageService) {\n      this.actions$ = actions$;\n      this.localStorageService = localStorageService;\n      this.login = createEffect(() => this.actions$.pipe(ofType(authLogin), tap(auth => {\n        this.localStorageService.setItem(AUTH_KEY, {\n          isAuthenticated: true,\n          token: auth.token,\n          isConfirmed: auth.isConfirmed\n        });\n      })), {\n        dispatch: false\n      });\n      this.logout = createEffect(() => this.actions$.pipe(ofType(authLogout), tap(() => {\n        this.localStorageService.setItem(AUTH_KEY, {\n          isAuthenticated: false,\n          token: null,\n          isConfirmed: false\n        });\n      })), {\n        dispatch: false\n      });\n    }\n\n  }\n\n  AuthEffects.ɵfac = function AuthEffects_Factory(t) {\n    return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.LocalStorageService));\n  };\n\n  AuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthEffects,\n    factory: AuthEffects.ɵfac\n  });\n  return AuthEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}