{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment as env } from '../../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ModelService = /*#__PURE__*/(() => {\n  class ModelService {\n    constructor(http) {\n      this.http = http;\n      this.API_URL = env.apiUrl + '/model';\n    }\n\n    static _handleError(err) {\n      return throwError(() => err || 'Error: Unable to complete request.');\n    }\n\n    getGroupModels(groupId) {\n      return this.http.get(`${this.API_URL}/${groupId}`).pipe(catchError(ModelService._handleError));\n    }\n\n    getParameters(modelId) {\n      return this.http.get(`${this.API_URL}/parameters/${modelId}`).pipe(catchError(ModelService._handleError));\n    }\n\n    saveModel(model) {\n      return this.http.post(`${this.API_URL}`, model).pipe(catchError(ModelService._handleError));\n    }\n\n    trainModel(data) {\n      return this.http.put(`${this.API_URL}/train`, data).pipe(catchError(ModelService._handleError));\n    }\n\n    testModel(data) {\n      return this.http.put(`${this.API_URL}/test`, data).pipe(catchError(ModelService._handleError));\n    }\n\n    deleteModel(modelId) {\n      return this.http.delete(`${this.API_URL}/${modelId}`).pipe(catchError(ModelService._handleError));\n    }\n\n  }\n\n  ModelService.ɵfac = function ModelService_Factory(t) {\n    return new (t || ModelService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ModelService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ModelService,\n    factory: ModelService.ɵfac\n  });\n  return ModelService;\n})();","map":null,"metadata":{},"sourceType":"module"}