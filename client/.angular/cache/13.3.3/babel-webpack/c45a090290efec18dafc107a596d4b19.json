{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment as env } from '../../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiTokenService = /*#__PURE__*/(() => {\n  class ApiTokenService {\n    constructor(http) {\n      this.http = http;\n      this.API_URL = env.apiUrl + '/api-token';\n    }\n\n    static _handleError(err) {\n      return throwError(() => err.message || 'Error: Unable to complete request.');\n    }\n\n    getApiTokens(groupId) {\n      return this.http.get(`${this.API_URL}/${groupId}`).pipe(catchError(ApiTokenService._handleError));\n    }\n\n    saveApiToken(apiToken) {\n      return this.http.post(`${this.API_URL}`, apiToken).pipe(catchError(ApiTokenService._handleError));\n    }\n\n    updateApiToken(apiToken, apiTokenId) {\n      return this.http.put(`${this.API_URL}/${apiTokenId}`, apiToken).pipe(catchError(ApiTokenService._handleError));\n    }\n\n    deleteApiToken(apiTokenId) {\n      return this.http.delete(`${this.API_URL}/${apiTokenId}`).pipe(catchError(ApiTokenService._handleError));\n    }\n\n  }\n\n  ApiTokenService.ɵfac = function ApiTokenService_Factory(t) {\n    return new (t || ApiTokenService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ApiTokenService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiTokenService,\n    factory: ApiTokenService.ɵfac\n  });\n  return ApiTokenService;\n})();","map":null,"metadata":{},"sourceType":"module"}