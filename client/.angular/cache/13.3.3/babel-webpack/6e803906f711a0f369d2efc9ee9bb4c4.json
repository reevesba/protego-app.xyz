{"ast":null,"code":"import { A, Z, ZERO, NINE, SPACE, HOME, END, ENTER, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { Directive, InjectionToken, EventEmitter, forwardRef, ElementRef, Component, ChangeDetectionStrategy, Inject, Optional, Input, Output, ViewChild, ContentChild, HostBinding, NgModule } from '@angular/core';\nimport * as i9 from '@angular/forms';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport * as i11 from '@angular/material/core';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport * as i12 from '@angular/material/form-field';\nimport { MatFormField } from '@angular/material/form-field';\nimport * as i10 from '@angular/material/select';\nimport { MatSelect } from '@angular/material/select';\nimport { BehaviorSubject, of, combineLatest, Subject } from 'rxjs';\nimport { switchMap, map, startWith, delay, takeUntil, take, filter, tap } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport * as i2 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/material/checkbox';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport * as i4 from '@angular/material/progress-spinner';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport * as i5 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i6 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i7 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i8 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n\nconst _c0 = [\"searchSelectInput\"];\nconst _c1 = [\"innerSelectSearch\"];\n\nfunction MatSelectSearchComponent_mat_checkbox_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-checkbox\", 9);\n    i0.ɵɵlistener(\"change\", function MatSelectSearchComponent_mat_checkbox_3_Template_mat_checkbox_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6._emitSelectAllBooleanToParent($event.checked);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r1.matFormField == null ? null : ctx_r1.matFormField.color)(\"checked\", ctx_r1.toggleAllCheckboxChecked)(\"indeterminate\", ctx_r1.toggleAllCheckboxIndeterminate)(\"matTooltip\", ctx_r1.toggleAllCheckboxTooltipMessage)(\"matTooltipPosition\", ctx_r1.toogleAllCheckboxTooltipPosition);\n  }\n}\n\nfunction MatSelectSearchComponent_mat_spinner_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 10);\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 1, [\"*ngIf\", \"clearIcon; else defaultIcon\"]);\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"svgIcon\", ctx_r10.closeSvgIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", !ctx_r10.closeSvgIcon ? ctx_r10.closeIcon : null, \" \");\n  }\n}\n\nfunction MatSelectSearchComponent_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function MatSelectSearchComponent_button_7_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11._reset(true);\n    });\n    i0.ɵɵtemplate(1, MatSelectSearchComponent_button_7_ng_content_1_Template, 1, 0, \"ng-content\", 12);\n    i0.ɵɵtemplate(2, MatSelectSearchComponent_button_7_ng_template_2_Template, 2, 2, \"ng-template\", null, 13, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r9 = i0.ɵɵreference(3);\n\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.clearIcon)(\"ngIfElse\", _r9);\n  }\n}\n\nfunction MatSelectSearchComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.noEntriesFoundLabel, \"\\n\");\n  }\n}\n\nconst _c2 = [[[\"\", 8, \"mat-select-search-custom-header-content\"]], [[\"\", \"ngxMatSelectSearchClear\", \"\"]]];\n\nconst _c3 = function (a0, a1) {\n  return {\n    \"mat-select-search-inner-multiple\": a0,\n    \"mat-select-search-inner-toggle-all\": a1\n  };\n};\n\nconst _c4 = [\".mat-select-search-custom-header-content\", \"[ngxMatSelectSearchClear]\"];\nlet MatSelectSearchClearDirective = /*#__PURE__*/(() => {\n  class MatSelectSearchClearDirective {}\n\n  MatSelectSearchClearDirective.ɵfac = function MatSelectSearchClearDirective_Factory(t) {\n    return new (t || MatSelectSearchClearDirective)();\n  };\n\n  MatSelectSearchClearDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatSelectSearchClearDirective,\n    selectors: [[\"\", \"ngxMatSelectSearchClear\", \"\"]]\n  });\n  return MatSelectSearchClearDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** List of inputs of NgxMatSelectSearchComponent that can be configured with a global default. */\n\n\nconst configurableDefaultOptions = ['ariaLabel', 'clearSearchInput', 'closeIcon', 'closeSvgIcon', 'disableInitialFocus', 'disableScrollToActiveOnOptionsChanged', 'enableClearOnEscapePressed', 'hideClearSearchButton', 'indexAndLengthScreenReaderText', 'noEntriesFoundLabel', 'placeholderLabel', 'preventHomeEndKeyPropagation', 'searching'];\n/**\n * InjectionToken that can be used to specify global options. e.g.\n *\n * ```typescript\n * providers: [\n *   {\n *     provide: MAT_SELECTSEARCH_DEFAULT_OPTIONS,\n *     useValue: <MatSelectSearchOptions>{\n *       closeIcon: 'delete',\n *       noEntriesFoundLabel: 'No options found'\n *     }\n *   }\n * ]\n * ```\n *\n * See the corresponding inputs of `MatSelectSearchComponent` for documentation.\n */\n\nconst MAT_SELECTSEARCH_DEFAULT_OPTIONS = new InjectionToken('mat-selectsearch-default-options');\n/** @deprecated */\n\nconst configurableGlobalOptions = configurableDefaultOptions;\n/** @deprecated */\n\nconst MATSELECTSEARCH_GLOBAL_OPTIONS = MAT_SELECTSEARCH_DEFAULT_OPTIONS;\n/** The max height of the select's overlay panel. */\n\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/* tslint:disable:member-ordering component-selector */\n\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n\nlet MatSelectSearchComponent = /*#__PURE__*/(() => {\n  class MatSelectSearchComponent {\n    constructor(matSelect, changeDetectorRef, _viewportRuler, matOption = null, liveAnnouncer, matFormField = null, defaultOptions) {\n      this.matSelect = matSelect;\n      this.changeDetectorRef = changeDetectorRef;\n      this._viewportRuler = _viewportRuler;\n      this.matOption = matOption;\n      this.liveAnnouncer = liveAnnouncer;\n      this.matFormField = matFormField;\n      /** Label of the search placeholder */\n\n      this.placeholderLabel = 'Suche';\n      /** Type of the search input field */\n\n      this.type = 'text';\n      /** Font-based icon used for displaying Close-Icon */\n\n      this.closeIcon = 'close';\n      /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n\n      this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n      /**\n       *  Text that is appended to the currently active item label announced by screen readers,\n       *  informing the user of the current index, value and total options.\n       *  eg: Bank R (Germany) 1 of 6\n      */\n\n      this.indexAndLengthScreenReaderText = ' of ';\n      /**\n        * Whether or not the search field should be cleared after the dropdown menu is closed.\n        * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n        */\n\n      this.clearSearchInput = true;\n      /** Whether to show the search-in-progress indicator */\n\n      this.searching = false;\n      /** Disables initial focusing of the input field */\n\n      this.disableInitialFocus = false;\n      /** Enable clear input on escape pressed */\n\n      this.enableClearOnEscapePressed = false;\n      /**\n       * Prevents home / end key being propagated to mat-select,\n       * allowing to move the cursor within the search input instead of navigating the options\n       */\n\n      this.preventHomeEndKeyPropagation = false;\n      /** Disables scrolling to active options when option list changes. Useful for server-side search */\n\n      this.disableScrollToActiveOnOptionsChanged = false;\n      /** Adds 508 screen reader support for search box */\n\n      this.ariaLabel = 'dropdown search';\n      /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n\n      this.showToggleAllCheckbox = false;\n      /** select all checkbox checked state */\n\n      this.toggleAllCheckboxChecked = false;\n      /** select all checkbox indeterminate state */\n\n      this.toggleAllCheckboxIndeterminate = false;\n      /** Display a message in a tooltip on the toggle-all checkbox */\n\n      this.toggleAllCheckboxTooltipMessage = '';\n      /** Define the position of the tooltip on the toggle-all checkbox. */\n\n      this.toogleAllCheckboxTooltipPosition = 'below';\n      /** Show/Hide the search clear button of the search input */\n\n      this.hideClearSearchButton = false;\n      /**\n       * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n       * Defaults to false, so selected options are only restored while filtering is active.\n       */\n\n      this.alwaysRestoreSelectedOptionsMulti = false;\n      /** Output emitter to send to parent component with the toggle all boolean */\n\n      this.toggleAll = new EventEmitter();\n\n      this.onTouched = _ => {};\n\n      this._options$ = new BehaviorSubject(null);\n      this.optionsList$ = this._options$.pipe(switchMap(_options => _options ? _options.changes.pipe(map(options => options.toArray()), startWith(_options.toArray())) : of(null)));\n      this.optionsLength$ = this.optionsList$.pipe(map(options => options ? options.length : 0));\n      this._formControl = new FormControl('');\n      /** whether to show the no entries found message */\n\n      this._showNoEntriesFound$ = combineLatest([this._formControl.valueChanges, this.optionsLength$]).pipe(map(([value, optionsLength]) => this.noEntriesFoundLabel && value && optionsLength === this.getOptionsLengthOffset()));\n      /** Subject that emits when the component has been destroyed. */\n\n      this._onDestroy = new Subject();\n      this.applyDefaultOptions(defaultOptions);\n    }\n\n    get isInsideMatOption() {\n      return !!this.matOption;\n    }\n    /** Current search value */\n\n\n    get value() {\n      return this._formControl.value;\n    }\n    /** Reference to the MatSelect options */\n\n\n    set _options(_options) {\n      this._options$.next(_options);\n    }\n\n    get _options() {\n      return this._options$.getValue();\n    }\n\n    applyDefaultOptions(defaultOptions) {\n      if (!defaultOptions) {\n        return;\n      }\n\n      for (let key of configurableDefaultOptions) {\n        if (defaultOptions.hasOwnProperty(key)) {\n          this[key] = defaultOptions[key];\n        }\n      }\n    }\n\n    ngOnInit() {\n      // set custom panel class\n      const panelClass = 'mat-select-search-panel';\n\n      if (this.matSelect.panelClass) {\n        if (Array.isArray(this.matSelect.panelClass)) {\n          this.matSelect.panelClass.push(panelClass);\n        } else if (typeof this.matSelect.panelClass === 'string') {\n          this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n        } else if (typeof this.matSelect.panelClass === 'object') {\n          this.matSelect.panelClass[panelClass] = true;\n        }\n      } else {\n        this.matSelect.panelClass = panelClass;\n      } // set custom mat-option class if the component was placed inside a mat-option\n\n\n      if (this.matOption) {\n        this.matOption.disabled = true;\n\n        this.matOption._getHostElement().classList.add('contains-mat-select-search');\n      } else {\n        console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n      } // when the select dropdown panel is opened or closed\n\n\n      this.matSelect.openedChange.pipe(delay(1), takeUntil(this._onDestroy)).subscribe(opened => {\n        if (opened) {\n          this.updateInputWidth(); // focus the search field when opening\n\n          if (!this.disableInitialFocus) {\n            this._focus();\n          }\n        } else {\n          // clear it when closing\n          if (this.clearSearchInput) {\n            this._reset();\n          }\n        }\n      }); // set the first item active after the options changed\n\n      this.matSelect.openedChange.pipe(take(1)).pipe(takeUntil(this._onDestroy)).subscribe(() => {\n        if (this.matSelect._keyManager) {\n          this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\n        } else {\n          console.log('_keyManager was not initialized.');\n        }\n\n        this._options = this.matSelect.options; // Closure variable for tracking the most recent first option.\n        // In order to avoid avoid causing the list to\n        // scroll to the top when options are added to the bottom of\n        // the list (eg: infinite scroll), we compare only\n        // the changes to the first options to determine if we\n        // should set the first item as active.\n        // This prevents unnecessary scrolling to the top of the list\n        // when options are appended, but allows the first item\n        // in the list to be set as active by default when there\n        // is no active selection\n\n        let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n\n        this._options.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n          // avoid \"expression has been changed\" error\n          setTimeout(() => {\n            // Convert the QueryList to an array\n            const options = this._options.toArray(); // The true first item is offset by 1\n\n\n            const currentFirstOption = options[this.getOptionsLengthOffset()];\n            const keyManager = this.matSelect._keyManager;\n\n            if (keyManager && this.matSelect.panelOpen) {\n              // set first item active and input width\n              // Check to see if the first option in these changes is different from the previous.\n              const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption); // CASE: The first option is different now.\n              // Indiciates we should set it as active and scroll to the top.\n\n              if (firstOptionIsChanged || !keyManager.activeItem || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n                keyManager.setFirstItemActive();\n              } // wait for panel width changes\n\n\n              setTimeout(() => {\n                this.updateInputWidth();\n              });\n\n              if (!this.disableScrollToActiveOnOptionsChanged) {\n                this.adjustScrollTopToFitActiveOptionIntoView();\n              }\n            } // Update our reference\n\n\n            previousFirstOption = currentFirstOption;\n          });\n        });\n      }); // add or remove css class depending on whether to show the no entries found message\n      // note: this is hacky\n\n      this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(showNoEntriesFound => {\n        // set no entries found class on mat option\n        if (this.matOption) {\n          if (showNoEntriesFound) {\n            this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n          } else {\n            this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n          }\n        }\n      }); // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n\n\n      this._viewportRuler.change().pipe(takeUntil(this._onDestroy)).subscribe(() => {\n        if (this.matSelect.panelOpen) {\n          this.updateInputWidth();\n        }\n      });\n\n      this.initMultipleHandling();\n      this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n        // update view when available options change\n        this.changeDetectorRef.markForCheck();\n      });\n    }\n\n    _emitSelectAllBooleanToParent(state) {\n      this.toggleAll.emit(state);\n    }\n\n    ngOnDestroy() {\n      this._onDestroy.next();\n\n      this._onDestroy.complete();\n    }\n\n    _isToggleAllCheckboxVisible() {\n      return this.matSelect.multiple && this.showToggleAllCheckbox;\n    }\n    /**\n     * Handles the key down event with MatSelect.\n     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n     * @param event\n     */\n\n\n    _handleKeydown(event) {\n      // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n      if (event.key && event.key.length === 1 || event.keyCode >= A && event.keyCode <= Z || event.keyCode >= ZERO && event.keyCode <= NINE || event.keyCode === SPACE || this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END)) {\n        event.stopPropagation();\n      }\n\n      if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n        // Regain focus after multiselect, so we can further type\n        setTimeout(() => this._focus());\n      } // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n\n\n      if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n        this._reset(true);\n\n        event.stopPropagation();\n      }\n    }\n    /**\n     * Handles the key up event with MatSelect.\n     * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n     */\n\n\n    _handleKeyup(event) {\n      if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n\n        const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n\n        if (index !== -1) {\n          const activeDescendant = this._options.toArray()[index];\n\n          this.liveAnnouncer.announce(activeDescendant.viewValue + ' ' + this.getAriaIndex(index) + this.indexAndLengthScreenReaderText + this.getAriaLength());\n        }\n      }\n    }\n    /**\n     * Calculate the index of the current option, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\n     *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\n     */\n\n\n    getAriaIndex(optionIndex) {\n      if (this.getOptionsLengthOffset() === 0) {\n        return optionIndex + 1;\n      }\n\n      return optionIndex;\n    }\n    /**\n     * Calculate the length of the options, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\n     *    Case 2 [1, 2, 3] will have length of options.length.\n     */\n\n\n    getAriaLength() {\n      return this._options.toArray().length - this.getOptionsLengthOffset();\n    }\n\n    writeValue(value) {\n      this._lastExternalInputValue = value;\n\n      this._formControl.setValue(value);\n\n      this.changeDetectorRef.markForCheck();\n    }\n\n    onBlur() {\n      this.onTouched();\n    }\n\n    registerOnChange(fn) {\n      this._formControl.valueChanges.pipe(filter(value => value !== this._lastExternalInputValue), tap(() => this._lastExternalInputValue = undefined), takeUntil(this._onDestroy)).subscribe(fn);\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Focuses the search input field\n     */\n\n\n    _focus() {\n      if (!this.searchSelectInput || !this.matSelect.panel) {\n        return;\n      } // save and restore scrollTop of panel, since it will be reset by focus()\n      // note: this is hacky\n\n\n      const panel = this.matSelect.panel.nativeElement;\n      const scrollTop = panel.scrollTop; // focus\n\n      this.searchSelectInput.nativeElement.focus();\n      panel.scrollTop = scrollTop;\n    }\n    /**\n     * Resets the current search value\n     * @param focus whether to focus after resetting\n     */\n\n\n    _reset(focus) {\n      this._formControl.setValue('');\n\n      if (focus) {\n        this._focus();\n      }\n    }\n    /**\n     * Initializes handling <mat-select [multiple]=\"true\">\n     * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n     */\n\n\n    initMultipleHandling() {\n      if (!this.matSelect.ngControl) {\n        if (this.matSelect.multiple) {\n          // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n          // is necessary to properly work in multi-selection mode.\n          console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n        }\n\n        return;\n      } // if <mat-select [multiple]=\"true\">\n      // store previously selected values and restore them when they are deselected\n      // because the option is not available while we are currently filtering\n\n\n      this.previousSelectedValues = this.matSelect.ngControl.value;\n      this.matSelect.ngControl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe(values => {\n        let restoreSelectedValues = false;\n\n        if (this.matSelect.multiple) {\n          if ((this.alwaysRestoreSelectedOptionsMulti || this._formControl.value && this._formControl.value.length) && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n            if (!values || !Array.isArray(values)) {\n              values = [];\n            }\n\n            const optionValues = this.matSelect.options.map(option => option.value);\n            this.previousSelectedValues.forEach(previousValue => {\n              if (!values.some(v => this.matSelect.compareWith(v, previousValue)) && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n                // if a value that was selected before is deselected and not found in the options, it was deselected\n                // due to the filtering, so we restore it.\n                values.push(previousValue);\n                restoreSelectedValues = true;\n              }\n            });\n          }\n        }\n\n        this.previousSelectedValues = values;\n\n        if (restoreSelectedValues) {\n          this.matSelect._onChange(values);\n        }\n      });\n    }\n    /**\n     * Scrolls the currently active option into the view if it is not yet visible.\n     */\n\n\n    adjustScrollTopToFitActiveOptionIntoView() {\n      if (this.matSelect.panel && this.matSelect.options.length > 0) {\n        const matOptionHeight = this.getMatOptionHeight();\n        const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups); // If the component is in a MatOption, the activeItemIndex will be offset by one.\n\n\n        const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n        const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n        const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n        const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n        const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n\n        if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n          this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n        } else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n          this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n        }\n      }\n    }\n    /**\n     *  Set the width of the innerSelectSearch to fit even custom scrollbars\n     *  And support all Operation Systems\n     */\n\n\n    updateInputWidth() {\n      if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n        return;\n      }\n\n      let element = this.innerSelectSearch.nativeElement;\n      let panelElement;\n\n      while (element = element.parentElement) {\n        if (element.classList.contains('mat-select-panel')) {\n          panelElement = element;\n          break;\n        }\n      }\n\n      if (panelElement) {\n        this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n      }\n    }\n\n    getMatOptionHeight() {\n      if (this.matSelect.options.length > 0) {\n        return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n      }\n\n      return 0;\n    }\n    /**\n     * Determine the offset to length that can be caused by the optional matOption used as a search input.\n     */\n\n\n    getOptionsLengthOffset() {\n      if (this.matOption) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n\n  }\n\n  MatSelectSearchComponent.ɵfac = function MatSelectSearchComponent_Factory(t) {\n    return new (t || MatSelectSearchComponent)(i0.ɵɵdirectiveInject(MatSelect), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(MatOption, 8), i0.ɵɵdirectiveInject(i2.LiveAnnouncer), i0.ɵɵdirectiveInject(MatFormField, 8), i0.ɵɵdirectiveInject(MAT_SELECTSEARCH_DEFAULT_OPTIONS, 8));\n  };\n\n  MatSelectSearchComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatSelectSearchComponent,\n    selectors: [[\"ngx-mat-select-search\"]],\n    contentQueries: function MatSelectSearchComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatSelectSearchClearDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clearIcon = _t.first);\n      }\n    },\n    viewQuery: function MatSelectSearchComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7, ElementRef);\n        i0.ɵɵviewQuery(_c1, 7, ElementRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchSelectInput = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.innerSelectSearch = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function MatSelectSearchComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-select-search-inside-mat-option\", ctx.isInsideMatOption);\n      }\n    },\n    inputs: {\n      placeholderLabel: \"placeholderLabel\",\n      type: \"type\",\n      closeIcon: \"closeIcon\",\n      closeSvgIcon: \"closeSvgIcon\",\n      noEntriesFoundLabel: \"noEntriesFoundLabel\",\n      indexAndLengthScreenReaderText: \"indexAndLengthScreenReaderText\",\n      clearSearchInput: \"clearSearchInput\",\n      searching: \"searching\",\n      disableInitialFocus: \"disableInitialFocus\",\n      enableClearOnEscapePressed: \"enableClearOnEscapePressed\",\n      preventHomeEndKeyPropagation: \"preventHomeEndKeyPropagation\",\n      disableScrollToActiveOnOptionsChanged: \"disableScrollToActiveOnOptionsChanged\",\n      ariaLabel: \"ariaLabel\",\n      showToggleAllCheckbox: \"showToggleAllCheckbox\",\n      toggleAllCheckboxChecked: \"toggleAllCheckboxChecked\",\n      toggleAllCheckboxIndeterminate: \"toggleAllCheckboxIndeterminate\",\n      toggleAllCheckboxTooltipMessage: \"toggleAllCheckboxTooltipMessage\",\n      toogleAllCheckboxTooltipPosition: \"toogleAllCheckboxTooltipPosition\",\n      hideClearSearchButton: \"hideClearSearchButton\",\n      alwaysRestoreSelectedOptionsMulti: \"alwaysRestoreSelectedOptionsMulti\"\n    },\n    outputs: {\n      toggleAll: \"toggleAll\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSelectSearchComponent),\n      multi: true\n    }])],\n    ngContentSelectors: _c4,\n    decls: 11,\n    vars: 14,\n    consts: [[\"matInput\", \"\", 1, \"mat-select-search-input\", \"mat-select-search-hidden\"], [1, \"mat-select-search-inner\", \"mat-typography\", \"mat-datepicker-content\", \"mat-tab-header\", 3, \"ngClass\"], [\"innerSelectSearch\", \"\"], [\"class\", \"mat-select-search-toggle-all-checkbox\", \"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\", 4, \"ngIf\"], [\"autocomplete\", \"off\", 1, \"mat-select-search-input\", \"mat-input-element\", 3, \"type\", \"formControl\", \"placeholder\", \"keydown\", \"keyup\", \"blur\"], [\"searchSelectInput\", \"\"], [\"class\", \"mat-select-search-spinner\", \"diameter\", \"16\", 4, \"ngIf\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", \"class\", \"mat-select-search-clear\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"mat-select-search-no-entries-found\", 4, \"ngIf\"], [\"matTooltipClass\", \"ngx-mat-select-search-toggle-all-tooltip\", 1, \"mat-select-search-toggle-all-checkbox\", 3, \"color\", \"checked\", \"indeterminate\", \"matTooltip\", \"matTooltipPosition\", \"change\"], [\"diameter\", \"16\", 1, \"mat-select-search-spinner\"], [\"mat-button\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 1, \"mat-select-search-clear\", 3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"defaultIcon\", \"\"], [3, \"svgIcon\"], [1, \"mat-select-search-no-entries-found\"]],\n    template: function MatSelectSearchComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c2);\n        i0.ɵɵelement(0, \"input\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1, 2);\n        i0.ɵɵtemplate(3, MatSelectSearchComponent_mat_checkbox_3_Template, 1, 5, \"mat-checkbox\", 3);\n        i0.ɵɵelementStart(4, \"input\", 4, 5);\n        i0.ɵɵlistener(\"keydown\", function MatSelectSearchComponent_Template_input_keydown_4_listener($event) {\n          return ctx._handleKeydown($event);\n        })(\"keyup\", function MatSelectSearchComponent_Template_input_keyup_4_listener($event) {\n          return ctx._handleKeyup($event);\n        })(\"blur\", function MatSelectSearchComponent_Template_input_blur_4_listener() {\n          return ctx.onBlur();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, MatSelectSearchComponent_mat_spinner_6_Template, 1, 0, \"mat-spinner\", 6);\n        i0.ɵɵtemplate(7, MatSelectSearchComponent_button_7_Template, 4, 2, \"button\", 7);\n        i0.ɵɵprojection(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, MatSelectSearchComponent_div_9_Template, 2, 1, \"div\", 8);\n        i0.ɵɵpipe(10, \"async\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(11, _c3, ctx.matSelect.multiple, ctx._isToggleAllCheckboxVisible()));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx._isToggleAllCheckboxVisible());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"type\", ctx.type)(\"formControl\", ctx._formControl)(\"placeholder\", ctx.placeholderLabel);\n        i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.searching);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.hideClearSearchButton && ctx.value && !ctx.searching);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(10, 9, ctx._showNoEntriesFound$));\n      }\n    },\n    directives: [i3.MatCheckbox, i4.MatSpinner, i5.MatButton, i6.MatIcon, i7.NgClass, i7.NgIf, i8.MatTooltip, i9.DefaultValueAccessor, i9.NgControlStatus, i9.FormControlDirective],\n    pipes: [i7.AsyncPipe],\n    styles: [\".mat-select-search-hidden[_ngcontent-%COMP%]{visibility:hidden}.mat-select-search-inner[_ngcontent-%COMP%]{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple[_ngcontent-%COMP%]{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all[_ngcontent-%COMP%]{display:flex;align-items:center}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]{flex-basis:auto}.mat-select-search-inner[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]:-ms-input-placeholder{-ms-user-select:text}  .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input[_ngcontent-%COMP%]{padding:16px 44px 16px 16px;box-sizing:border-box;width:100%}[dir=rtl][_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-right:16px;padding-left:44px}.mat-select-search-no-entries-found[_ngcontent-%COMP%]{padding:16px}.mat-select-search-clear[_ngcontent-%COMP%]{position:absolute;right:4px;top:5px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{right:auto;left:4px}.mat-select-search-spinner[_ngcontent-%COMP%]{position:absolute;right:16px;top:calc(50% - 8px)}[dir=rtl][_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-spinner[_ngcontent-%COMP%]{right:auto;left:16px}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-input[_ngcontent-%COMP%]{padding-top:0;padding-bottom:0;height:3em;line-height:3em}.mat-select-search-inside-mat-option[_nghost-%COMP%]   .mat-select-search-clear[_ngcontent-%COMP%]{top:3px}  .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0;margin-left:0}  .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}  .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:16px;padding-bottom:2px}[dir=rtl][_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .mat-select-search-toggle-all-checkbox[_ngcontent-%COMP%]{padding-left:0;padding-right:16px}\"],\n    changeDetection: 0\n  });\n  return MatSelectSearchComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst MatSelectSearchVersion = '4.1.1';\nlet NgxMatSelectSearchModule = /*#__PURE__*/(() => {\n  class NgxMatSelectSearchModule {}\n\n  NgxMatSelectSearchModule.ɵfac = function NgxMatSelectSearchModule_Factory(t) {\n    return new (t || NgxMatSelectSearchModule)();\n  };\n\n  NgxMatSelectSearchModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxMatSelectSearchModule\n  });\n  NgxMatSelectSearchModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, ReactiveFormsModule, MatButtonModule, MatCheckboxModule, MatIconModule, MatProgressSpinnerModule, MatTooltipModule]]\n  });\n  return NgxMatSelectSearchModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MATSELECTSEARCH_GLOBAL_OPTIONS, MAT_SELECTSEARCH_DEFAULT_OPTIONS, MatSelectSearchClearDirective, MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, configurableDefaultOptions, configurableGlobalOptions }; //# sourceMappingURL=ngx-mat-select-search.mjs.map","map":null,"metadata":{},"sourceType":"module"}