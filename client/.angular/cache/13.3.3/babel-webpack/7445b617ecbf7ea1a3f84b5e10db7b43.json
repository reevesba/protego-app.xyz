{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment as env } from '../../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let GroupService = /*#__PURE__*/(() => {\n  class GroupService {\n    constructor(http) {\n      this.http = http;\n      this.API_URL = env.apiUrl + '/groups';\n    }\n\n    static _handleError(err) {\n      return throwError(() => err.message || 'Error: Unable to complete request.');\n    }\n\n    getGroups() {\n      return this.http.get(`${this.API_URL}`).pipe(catchError(GroupService._handleError));\n    }\n\n    getUserGroups(username) {\n      return this.http.get(`${this.API_URL}/user-groups/${username}`).pipe(catchError(GroupService._handleError));\n    }\n\n    getGroupMembers(groupId) {\n      return this.http.get(`${this.API_URL}/group-members/${groupId}`).pipe(catchError(GroupService._handleError));\n    }\n\n    saveGroup(group) {\n      return this.http.post(`${this.API_URL}`, group).pipe(catchError(GroupService._handleError));\n    }\n\n    saveGroupMember(groupMember) {\n      return this.http.post(`${this.API_URL}/group-members`, groupMember).pipe(catchError(GroupService._handleError));\n    }\n\n    updateGroup(group, groupId) {\n      return this.http.put(`${this.API_URL}/${groupId}`, group).pipe(catchError(GroupService._handleError));\n    }\n\n    updateGroupMember(groupMember, groupMemberId) {\n      return this.http.put(`${this.API_URL}/group-members/${groupMemberId}`, groupMember).pipe(catchError(GroupService._handleError));\n    }\n\n    deleteGroup(groupId) {\n      return this.http.delete(`${this.API_URL}/${groupId}`).pipe(catchError(GroupService._handleError));\n    }\n\n    deleteGroupMember(memberId) {\n      return this.http.delete(`${this.API_URL}/group-members/${memberId}`).pipe(catchError(GroupService._handleError));\n    }\n\n  }\n\n  GroupService.ɵfac = function GroupService_Factory(t) {\n    return new (t || GroupService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GroupService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GroupService,\n    factory: GroupService.ɵfac\n  });\n  return GroupService;\n})();","map":null,"metadata":{},"sourceType":"module"}