{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment as env } from '../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let RolesService = /*#__PURE__*/(() => {\n  class RolesService {\n    constructor(http) {\n      this.http = http;\n      this.API_URL = env.apiUrl + '/roles';\n    }\n\n    static _handleError(err) {\n      return throwError(() => err.message || 'Error: Unable to complete request.');\n    }\n\n    getRoles() {\n      return this.http.get(`${this.API_URL}`).pipe(catchError(RolesService._handleError));\n    }\n\n    saveRole(role) {\n      return this.http.post(`${this.API_URL}`, role).pipe(catchError(RolesService._handleError));\n    }\n\n    updateRole(role, roleId) {\n      return this.http.put(`${this.API_URL}/${roleId}`, role).pipe(catchError(RolesService._handleError));\n    }\n\n    deleteRole(roleId) {\n      return this.http.delete(`${this.API_URL}/${roleId}`).pipe(catchError(RolesService._handleError));\n    }\n\n  }\n\n  RolesService.ɵfac = function RolesService_Factory(t) {\n    return new (t || RolesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  RolesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RolesService,\n    factory: RolesService.ɵfac\n  });\n  return RolesService;\n})();","map":null,"metadata":{},"sourceType":"module"}