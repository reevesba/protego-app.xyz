{"ast":null,"code":"import { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport let CustomValidationService = /*#__PURE__*/(() => {\n  class CustomValidationService {\n    constructor(authService) {\n      this.authService = authService;\n    }\n\n    patternValidator() {\n      return control => {\n        if (!control.value) {\n          return null;\n        }\n\n        const regex = new RegExp('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$');\n        const valid = regex.test(control.value);\n        return valid ? null : {\n          invalidPassword: true\n        };\n      };\n    }\n\n    MatchPassword(password, confirmPassword) {\n      return control => {\n        const passwordControl = control.get(password);\n        const confirmPasswordControl = control.get(confirmPassword);\n\n        if (!passwordControl || !confirmPasswordControl) {\n          return null;\n        }\n\n        if (confirmPasswordControl.errors && !confirmPasswordControl.errors.passwordMismatch) {\n          return null;\n        }\n\n        if (passwordControl.value !== confirmPasswordControl.value) {\n          confirmPasswordControl.setErrors({\n            passwordMismatch: true\n          });\n          return {\n            passwordMismatch: true\n          };\n        } else {\n          confirmPasswordControl.setErrors(null);\n          return null;\n        }\n      };\n    }\n\n    isInt() {\n      return control => {\n        if (!control.value) {\n          return null;\n        }\n\n        if (!Number.isInteger(+control.value)) {\n          control.setErrors({\n            notInteger: true\n          });\n          return {\n            notInteger: true\n          };\n        } else {\n          control.setErrors({\n            notInteger: false\n          });\n          return null;\n        }\n      };\n    }\n\n    isNumber() {\n      return control => {\n        if (!control.value) {\n          return null;\n        }\n\n        if (isNaN(+control.value)) {\n          control.setErrors({\n            notNumber: true\n          });\n          return {\n            notNumber: true\n          };\n        } else {\n          control.setErrors({\n            notNumber: false\n          });\n          return null;\n        }\n      };\n    }\n\n    isNonNegative() {\n      return control => {\n        if (!control.value) {\n          return null;\n        }\n\n        if (+control.value < 0) {\n          control.setErrors({\n            isNegative: true\n          });\n          return {\n            isNegative: true\n          };\n        } else {\n          control.setErrors({\n            isNegative: false\n          });\n          return null;\n        }\n      };\n    }\n\n    classPriorValid() {\n      return control => {\n        if (!control.value) {\n          return null;\n        }\n\n        var elements = control.value.replace(/\\s/g, '').split(\",\");\n\n        if (elements.length != 2) {\n          control.setErrors({\n            isInvalid: true\n          });\n          return {\n            isInvalid: true\n          };\n        } else if (elements.length == 2) {\n          if (isNaN(+elements[0]) || isNaN(+elements[1]) || elements.includes('')) {\n            control.setErrors({\n              isInvalid: true\n            });\n            return {\n              isInvalid: true\n            };\n          }\n        } else {\n          control.setErrors({\n            isInvalid: false\n          });\n          return null;\n        }\n      };\n    }\n\n    maxFeaturesValid() {\n      return control => {\n        if (!control.value) {\n          return null;\n        }\n\n        const values = ['auto', 'sqrt', 'log2'];\n\n        if (values.includes(control.value) || !isNaN(+control.value)) {\n          control.setErrors({\n            isInvalid: false\n          });\n          return null;\n        } else {\n          control.setErrors({\n            isInvalid: true\n          });\n          return {\n            isInvalid: true\n          };\n        }\n      };\n    }\n\n    maxFeaturesValid2() {\n      return control => {\n        if (!control.value) {\n          return null;\n        }\n\n        const values = ['sqrt', 'log2'];\n\n        if (values.includes(control.value) || !isNaN(+control.value)) {\n          control.setErrors({\n            isInvalid: false\n          });\n          return null;\n        } else {\n          control.setErrors({\n            isInvalid: true\n          });\n          return {\n            isInvalid: true\n          };\n        }\n      };\n    }\n\n    isDict(val) {\n      try {\n        var parsedVal = JSON.parse(val);\n        return true;\n      } catch (_a) {\n        return false;\n      }\n    }\n\n    classWeightValid() {\n      return control => {\n        if (!control.value) {\n          return null;\n        } // First, check if 'balanced'\n        else if (control.value === 'balanced') {\n          control.setErrors({\n            isInvalid: false\n          });\n          return null;\n        } // Check if dict or list of dict\n        else if (this.isDict(control.value)) {\n          control.setErrors({\n            isInvalid: false\n          });\n          return null;\n        } // Input is invalid\n        else {\n          control.setErrors({\n            isInvalid: true\n          });\n          return {\n            isInvalid: true\n          };\n        }\n      };\n    }\n\n    userNameValidator(userControl) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          if (this.validateUsername(userControl.value)) {\n            resolve({\n              userNameNotAvailable: true\n            });\n          } else {\n            resolve(null);\n          }\n        }, 1000);\n      });\n    }\n\n    validateUsername(userName) {\n      // first, check if the username is available\n      if (userName == '') {\n        return true;\n      }\n\n      this.authSubs = this.authService.usernameAvailable(userName).subscribe({\n        next: v => this.usernameAvailable = !JSON.parse(v['available']),\n        error: e => console.error(e)\n      });\n      return this.usernameAvailable;\n    }\n\n    emailValidator(userControl) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          if (this.validateEmail(userControl.value)) {\n            resolve({\n              emailNotAvailable: true\n            });\n          } else {\n            resolve(null);\n          }\n        }, 1000);\n      });\n    }\n\n    validateEmail(email) {\n      // first, check if the username is available\n      if (email == '') {\n        return true;\n      }\n\n      this.authSubs = this.authService.emailAvailable(email).subscribe({\n        next: v => this.emailAvailable = !JSON.parse(v['available']),\n        error: e => console.error(e)\n      });\n      return this.emailAvailable;\n    }\n\n  }\n\n  CustomValidationService.ɵfac = function CustomValidationService_Factory(t) {\n    return new (t || CustomValidationService)(i0.ɵɵinject(i1.AuthService));\n  };\n\n  CustomValidationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomValidationService,\n    factory: CustomValidationService.ɵfac,\n    providedIn: 'root'\n  });\n  return CustomValidationService;\n})();","map":null,"metadata":{},"sourceType":"module"}